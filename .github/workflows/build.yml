name: Build Simpsons:Hit & Run UWP

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name'
        required: true
        default: 'v1.0.0'
      package_name:
        description: 'Package Name'
        required: true
        default: 'SimpsonsHitRun'

jobs:
  build:
    runs-on: windows-latest
    
    env:
      SolutionPath: SRR2.sln  # Solution is in the root of the repo
      Platform: x64
      Configuration: Release
      BuildMode: SideLoadOnly
      AppxBundle: Never      
      ProjectPath: src/game/SRR2.vcxproj  # The project file path
      ProjectDirectory: src/game
      PackageOutputRootDir: C:\AppPackage
      PackageOutputDir: SimpsonsHitRun
      UWPGLSampleDir: ${{ github.workspace }}/uwp_gl_sample  # Directory for the uwp_gl_sample repo

    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v1.1.1
        
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true 
          fetch-depth: 0

      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          git pull origin master  # Ensure the latest version of vcpkg
          ./bootstrap-vcpkg.bat   # Re-run the bootstrap process to update vcpkg
          working-directory: ${{ github.workspace }}
  
      - name: Install dependencies with vcpkg
        run: |
          cd vcpkg
          ./vcpkg install --triplet x64-uwp
          ./vcpkg integrate install
        working-directory: ${{ github.workspace }}

      - name: Install dependencies with Meson (Mesa)
        run: |
          git clone https://github.com/aerisarn/meson.git
          cd meson
          python3 meson.py setup build_release --wipe --backend=vs --uwp --buildtype=release -Dcpp_std=vc++17 -Dcpp_args=["'/D _XBOX_UWP'"] -Dc_args=["'/D _XBOX_UWP'"] -Db_pch=false -Dc_winlibs=[] -Dcpp_winlibs=[]
          python3 meson.py install -C build_release
        working-directory: ${{ github.workspace }}

      - name: Clean solution
        run: |
          msbuild SRR2.sln /t:Clean /p:Configuration=Release
        
      - name: Generate Self-Signed Certificate
        id: generate_cert
        run: |
          $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=SimpsonsHitRunUWP" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1) -Type CodeSigningCert
          echo "THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Set Package Name
        id: set_package_name
        run: |
          echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
        
      - name: App Build
        run: |
          msbuild $env:SolutionPath `
          /t:Build `
          /p:Platform=$env:Platform `
          /p:Configuration=$env:Configuration `
          /p:UapAppxPackageBuildMode=$env:BuildMode `
          /p:AppxBundle=$env:AppxBundle `
          /p:PackageCertificateThumbprint="${{ env.THUMBPRINT }}" `
          /p:AppxPackageTestDir="${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}" `
          /p:AppxPackageSigningEnabled=true `
          /p:PlatformToolset=v143 `
          /p:CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        shell: pwsh

      - name: Copy Mesa and GLAD libraries
        run: |
          # Copying libraries from uwp_gl_sample to the output directory
          $glSampleLibs = @("glad.dll", "libgallium_wgl.dll", "libglapi.dll", "opengl32.dll", "z-1.dll")
          $destinationDir = "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}\bin"

          foreach ($lib in $glSampleLibs) {
            Copy-Item -Path "${{ env.UWPGLSampleDir }}\lib\$lib" -Destination $destinationDir -Force
          }
          
          # If you have any other necessary files from uwp_gl_sample, add them here
          Copy-Item -Path "${{ env.UWPGLSampleDir }}\lib\sdl2.dll" -Destination $destinationDir -Force
          Copy-Item -Path "${{ env.UWPGLSampleDir }}\lib\glad.h" -Destination $destinationDir -Force
        shell: pwsh

      - name: Clean the Package
        run: |
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}"
          if (Test-Path $PackagePath) {
            Write-Host "Cleaning package directory: $PackagePath"
            Remove-Item -Recurse -path "$PackagePath\Add-AppDevPackage.resources" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\TelemetryDependencies" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\arm" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\arm64" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\x86" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\Win32" -ErrorAction SilentlyContinue
            Remove-Item -path "$PackagePath\Add-AppDevPackage.ps1" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Install.ps1" -ErrorAction SilentlyContinue
          } else {
            Write-Host "Package path does not exist: $PackagePath"
            exit 1
          }
        shell: pwsh
          
      - name: Create Archive
        run: |
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}"
          if (Test-Path $PackagePath) {
            Write-Host "Creating archive for: $PackagePath"
            Compress-Archive -Path "$PackagePath\*" -DestinationPath "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip"
            Write-Host "Contents of package output directory after archiving:"
            Get-ChildItem -Path "${{ env.PackageOutputRootDir }}" -Recurse
          } else {
            Write-Host "Package path does not exist for archiving: $PackagePath"
            exit 1
          }
        shell: pwsh
       
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.package_name }} Build
          path: ${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}
